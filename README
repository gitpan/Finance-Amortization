Finance::Amortization(3U)ser Contributed Perl DocumentatiFoinnance::Amortization(3)



NNAAMMEE
       Finance::Amortization - Simple Amortization Schedules

SSYYNNOOPPSSIISS
       use Finance::Amortization

       # make a new schedule

       $amortization = new Finance::Amortization(principal => 100000, rate =
       0.06/12,      periods = 360);

       # get the balance after a the twelveth period

       $balance = $amortization->balance(12)

       # get the interest paid during the twelfth period

       $interest = $amortization->interest(12);

DDEESSCCRRIIPPTTIIOONN
       Finance::Amortization is a simple object oriented interface to an amor-
       tization table.  Pass in the principal to be amortized, the number of
       payments to be made, and the interest rate per payment.  It will calcu-
       late the rest on demand, and provides a few methods to ask for the
       state of the table after a given number of periods.

       Finance::Amortization is written in pure perl and does not depend on
       any other modules.  It exports no functions; all access is via methods
       called on an amortization object.  (Except for _n_e_w_(_), of course.)

       _n_e_w_(_)

       $am = Finance::Amortization->new(principal => 0, rate => 0, periods =>
       0,      compounding => 12, precision => 2);

       Creates a new amortization object.  Calling interface is hash style.
       The fields principal, rate, and periods are available, all defaulting
       to zero.

       Compounding is a parameter which sets how many periods the rate is com-
       pounded over.  Thus, if each amortization period is one month, setting
       compounding to 12 (the default), will make the rate an annual rate.
       That is, the interest rate per period is the rate specified, divided by
       the compounding.

       So, to get an amortization for 30 years on 200000, with a 6% annual
       rate, you would call new(principal => 200000, periods => 12*30, rate =>
       0.06), the compounding will default to 12, and so the rate will work
       out right for monthly payments.

       precision is used to specify the number of decimal places to round to
       when returning answers.  It defaults to 2, which is appropriate for US
       currency and many others.

       _r_a_t_e_(_)

       $rate_per_period = $am->_r_a_t_e_(_)

       returns the interest rate per period.  Ignores any arguments.

       _p_r_i_n_c_i_p_a_l_(_)

       $initial_value = $am->_p_r_i_n_c_i_p_a_l_(_)

       returns the initial principal being amortized.  Ignores any arguments.

       _p_e_r_i_o_d_s_(_)

       $number_of_periods = $am->_p_e_r_i_o_d_s_(_)

       returns the number of periods in which the principal is being amor-
       tized.  Ignores any arguments.

       _p_a_y_m_e_n_t_(_)

       $pmt = $am->_p_a_y_m_e_n_t_(_)

       returns the payment per period.  This method will cache the value the
       first time it is called.

       bbaallaannccee((nn))

       $balance = $am->balance(12);

       Returns the balance of the amortization after the period given in the
       argument

       iinntteerreesstt((nn))

       $interest = $am->interest(12);

       Returns the interest paid in the period given in the argument

BBUUGGSS
       This module uses perl's floating point for financial calculations.
       This may introduce inaccuracies and/or make this module unsuitable for
       serious financial applications.

TTOODDOO
       Use Math::BigRat for the calculations.

       Provide amortizers for present value, future value, annuities, etc.

       Allow for caching calculated values.

       Provide output methods and converters to various table modules.
       HTML::Table, Text::Table, and Data::Table come to mind.

       Write better test scripts.

       Better checking for errors and out of range input.  Return undef in
       these cases.

       Use a locale dependent value to set an appropriate default for preci-
       sion in the _n_e_w_(_) method.

LLIICCEENNSSEE
       None.  This entire module is in the public domain.

AAUUTTHHOORR
       Nathan Wagner <nw@hydaspes.if.org>

       This entire module is written by me and placed into the public domain.



perl v5.8.6                       2007-05-27          Finance::Amortization(3)
